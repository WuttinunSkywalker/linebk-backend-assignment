// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthMiddleware creates a new instance of AuthMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthMiddleware {
	mock := &AuthMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthMiddleware is an autogenerated mock type for the AuthMiddleware type
type AuthMiddleware struct {
	mock.Mock
}

type AuthMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthMiddleware) EXPECT() *AuthMiddleware_Expecter {
	return &AuthMiddleware_Expecter{mock: &_m.Mock}
}

// ValidateToken provides a mock function for the type AuthMiddleware
func (_mock *AuthMiddleware) ValidateToken() gin.HandlerFunc {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 gin.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}
	return r0
}

// AuthMiddleware_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type AuthMiddleware_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
func (_e *AuthMiddleware_Expecter) ValidateToken() *AuthMiddleware_ValidateToken_Call {
	return &AuthMiddleware_ValidateToken_Call{Call: _e.mock.On("ValidateToken")}
}

func (_c *AuthMiddleware_ValidateToken_Call) Run(run func()) *AuthMiddleware_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthMiddleware_ValidateToken_Call) Return(handlerFunc gin.HandlerFunc) *AuthMiddleware_ValidateToken_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *AuthMiddleware_ValidateToken_Call) RunAndReturn(run func() gin.HandlerFunc) *AuthMiddleware_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}
