// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/WuttinunSkywalker/linebk-backend-assignment/internal/api/account"
	mock "github.com/stretchr/testify/mock"
)

// NewAccountUsecase creates a new instance of AccountUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountUsecase {
	mock := &AccountUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AccountUsecase is an autogenerated mock type for the AccountUsecase type
type AccountUsecase struct {
	mock.Mock
}

type AccountUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountUsecase) EXPECT() *AccountUsecase_Expecter {
	return &AccountUsecase_Expecter{mock: &_m.Mock}
}

// GetAccountsByUserID provides a mock function for the type AccountUsecase
func (_mock *AccountUsecase) GetAccountsByUserID(userID string, limit int, offset int) ([]*account.AccountResponse, int, error) {
	ret := _mock.Called(userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountsByUserID")
	}

	var r0 []*account.AccountResponse
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) ([]*account.AccountResponse, int, error)); ok {
		return returnFunc(userID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) []*account.AccountResponse); ok {
		r0 = returnFunc(userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*account.AccountResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) int); ok {
		r1 = returnFunc(userID, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = returnFunc(userID, limit, offset)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// AccountUsecase_GetAccountsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountsByUserID'
type AccountUsecase_GetAccountsByUserID_Call struct {
	*mock.Call
}

// GetAccountsByUserID is a helper method to define mock.On call
//   - userID string
//   - limit int
//   - offset int
func (_e *AccountUsecase_Expecter) GetAccountsByUserID(userID interface{}, limit interface{}, offset interface{}) *AccountUsecase_GetAccountsByUserID_Call {
	return &AccountUsecase_GetAccountsByUserID_Call{Call: _e.mock.On("GetAccountsByUserID", userID, limit, offset)}
}

func (_c *AccountUsecase_GetAccountsByUserID_Call) Run(run func(userID string, limit int, offset int)) *AccountUsecase_GetAccountsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AccountUsecase_GetAccountsByUserID_Call) Return(accountResponses []*account.AccountResponse, n int, err error) *AccountUsecase_GetAccountsByUserID_Call {
	_c.Call.Return(accountResponses, n, err)
	return _c
}

func (_c *AccountUsecase_GetAccountsByUserID_Call) RunAndReturn(run func(userID string, limit int, offset int) ([]*account.AccountResponse, int, error)) *AccountUsecase_GetAccountsByUserID_Call {
	_c.Call.Return(run)
	return _c
}
