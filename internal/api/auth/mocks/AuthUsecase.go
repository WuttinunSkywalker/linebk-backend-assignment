// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/WuttinunSkywalker/linebk-backend-assignment/internal/api/auth"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthUsecase creates a new instance of AuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUsecase {
	mock := &AuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

type AuthUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthUsecase) EXPECT() *AuthUsecase_Expecter {
	return &AuthUsecase_Expecter{mock: &_m.Mock}
}

// LoginWithPin provides a mock function for the type AuthUsecase
func (_mock *AuthUsecase) LoginWithPin(userID string, pin string) (*auth.LoginResponse, error) {
	ret := _mock.Called(userID, pin)

	if len(ret) == 0 {
		panic("no return value specified for LoginWithPin")
	}

	var r0 *auth.LoginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*auth.LoginResponse, error)); ok {
		return returnFunc(userID, pin)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *auth.LoginResponse); ok {
		r0 = returnFunc(userID, pin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.LoginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(userID, pin)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthUsecase_LoginWithPin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginWithPin'
type AuthUsecase_LoginWithPin_Call struct {
	*mock.Call
}

// LoginWithPin is a helper method to define mock.On call
//   - userID string
//   - pin string
func (_e *AuthUsecase_Expecter) LoginWithPin(userID interface{}, pin interface{}) *AuthUsecase_LoginWithPin_Call {
	return &AuthUsecase_LoginWithPin_Call{Call: _e.mock.On("LoginWithPin", userID, pin)}
}

func (_c *AuthUsecase_LoginWithPin_Call) Run(run func(userID string, pin string)) *AuthUsecase_LoginWithPin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthUsecase_LoginWithPin_Call) Return(loginResponse *auth.LoginResponse, err error) *AuthUsecase_LoginWithPin_Call {
	_c.Call.Return(loginResponse, err)
	return _c
}

func (_c *AuthUsecase_LoginWithPin_Call) RunAndReturn(run func(userID string, pin string) (*auth.LoginResponse, error)) *AuthUsecase_LoginWithPin_Call {
	_c.Call.Return(run)
	return _c
}
