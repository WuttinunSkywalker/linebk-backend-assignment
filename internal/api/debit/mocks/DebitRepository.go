// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/WuttinunSkywalker/linebk-backend-assignment/internal/api/debit"
	mock "github.com/stretchr/testify/mock"
)

// NewDebitRepository creates a new instance of DebitRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDebitRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DebitRepository {
	mock := &DebitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DebitRepository is an autogenerated mock type for the DebitRepository type
type DebitRepository struct {
	mock.Mock
}

type DebitRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *DebitRepository) EXPECT() *DebitRepository_Expecter {
	return &DebitRepository_Expecter{mock: &_m.Mock}
}

// CountDebitCardsByUserID provides a mock function for the type DebitRepository
func (_mock *DebitRepository) CountDebitCardsByUserID(userID string) (int, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CountDebitCardsByUserID")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DebitRepository_CountDebitCardsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDebitCardsByUserID'
type DebitRepository_CountDebitCardsByUserID_Call struct {
	*mock.Call
}

// CountDebitCardsByUserID is a helper method to define mock.On call
//   - userID string
func (_e *DebitRepository_Expecter) CountDebitCardsByUserID(userID interface{}) *DebitRepository_CountDebitCardsByUserID_Call {
	return &DebitRepository_CountDebitCardsByUserID_Call{Call: _e.mock.On("CountDebitCardsByUserID", userID)}
}

func (_c *DebitRepository_CountDebitCardsByUserID_Call) Run(run func(userID string)) *DebitRepository_CountDebitCardsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DebitRepository_CountDebitCardsByUserID_Call) Return(n int, err error) *DebitRepository_CountDebitCardsByUserID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *DebitRepository_CountDebitCardsByUserID_Call) RunAndReturn(run func(userID string) (int, error)) *DebitRepository_CountDebitCardsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDebitCardsByUserID provides a mock function for the type DebitRepository
func (_mock *DebitRepository) GetDebitCardsByUserID(userID string, limit int, offset int) ([]*debit.DebitCard, error) {
	ret := _mock.Called(userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetDebitCardsByUserID")
	}

	var r0 []*debit.DebitCard
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) ([]*debit.DebitCard, error)); ok {
		return returnFunc(userID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) []*debit.DebitCard); ok {
		r0 = returnFunc(userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*debit.DebitCard)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DebitRepository_GetDebitCardsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDebitCardsByUserID'
type DebitRepository_GetDebitCardsByUserID_Call struct {
	*mock.Call
}

// GetDebitCardsByUserID is a helper method to define mock.On call
//   - userID string
//   - limit int
//   - offset int
func (_e *DebitRepository_Expecter) GetDebitCardsByUserID(userID interface{}, limit interface{}, offset interface{}) *DebitRepository_GetDebitCardsByUserID_Call {
	return &DebitRepository_GetDebitCardsByUserID_Call{Call: _e.mock.On("GetDebitCardsByUserID", userID, limit, offset)}
}

func (_c *DebitRepository_GetDebitCardsByUserID_Call) Run(run func(userID string, limit int, offset int)) *DebitRepository_GetDebitCardsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *DebitRepository_GetDebitCardsByUserID_Call) Return(debitCards []*debit.DebitCard, err error) *DebitRepository_GetDebitCardsByUserID_Call {
	_c.Call.Return(debitCards, err)
	return _c
}

func (_c *DebitRepository_GetDebitCardsByUserID_Call) RunAndReturn(run func(userID string, limit int, offset int) ([]*debit.DebitCard, error)) *DebitRepository_GetDebitCardsByUserID_Call {
	_c.Call.Return(run)
	return _c
}
