// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/WuttinunSkywalker/linebk-backend-assignment/internal/api/user"
	mock "github.com/stretchr/testify/mock"
)

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

type UserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *UserUsecase) EXPECT() *UserUsecase_Expecter {
	return &UserUsecase_Expecter{mock: &_m.Mock}
}

// GetUserByID provides a mock function for the type UserUsecase
func (_mock *UserUsecase) GetUserByID(id string) (*user.UserResponse, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *user.UserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*user.UserResponse, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *user.UserResponse); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserUsecase_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserUsecase_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - id string
func (_e *UserUsecase_Expecter) GetUserByID(id interface{}) *UserUsecase_GetUserByID_Call {
	return &UserUsecase_GetUserByID_Call{Call: _e.mock.On("GetUserByID", id)}
}

func (_c *UserUsecase_GetUserByID_Call) Run(run func(id string)) *UserUsecase_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserUsecase_GetUserByID_Call) Return(userResponse *user.UserResponse, err error) *UserUsecase_GetUserByID_Call {
	_c.Call.Return(userResponse, err)
	return _c
}

func (_c *UserUsecase_GetUserByID_Call) RunAndReturn(run func(id string) (*user.UserResponse, error)) *UserUsecase_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserGreetingByUserID provides a mock function for the type UserUsecase
func (_mock *UserUsecase) GetUserGreetingByUserID(id string) (*user.UserGreetingResponse, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGreetingByUserID")
	}

	var r0 *user.UserGreetingResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*user.UserGreetingResponse, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *user.UserGreetingResponse); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserGreetingResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserUsecase_GetUserGreetingByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserGreetingByUserID'
type UserUsecase_GetUserGreetingByUserID_Call struct {
	*mock.Call
}

// GetUserGreetingByUserID is a helper method to define mock.On call
//   - id string
func (_e *UserUsecase_Expecter) GetUserGreetingByUserID(id interface{}) *UserUsecase_GetUserGreetingByUserID_Call {
	return &UserUsecase_GetUserGreetingByUserID_Call{Call: _e.mock.On("GetUserGreetingByUserID", id)}
}

func (_c *UserUsecase_GetUserGreetingByUserID_Call) Run(run func(id string)) *UserUsecase_GetUserGreetingByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserUsecase_GetUserGreetingByUserID_Call) Return(userGreetingResponse *user.UserGreetingResponse, err error) *UserUsecase_GetUserGreetingByUserID_Call {
	_c.Call.Return(userGreetingResponse, err)
	return _c
}

func (_c *UserUsecase_GetUserGreetingByUserID_Call) RunAndReturn(run func(id string) (*user.UserGreetingResponse, error)) *UserUsecase_GetUserGreetingByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPreview provides a mock function for the type UserUsecase
func (_mock *UserUsecase) GetUserPreview(id string) (*user.UserPreviewResponse, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPreview")
	}

	var r0 *user.UserPreviewResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*user.UserPreviewResponse, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *user.UserPreviewResponse); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserPreviewResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserUsecase_GetUserPreview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPreview'
type UserUsecase_GetUserPreview_Call struct {
	*mock.Call
}

// GetUserPreview is a helper method to define mock.On call
//   - id string
func (_e *UserUsecase_Expecter) GetUserPreview(id interface{}) *UserUsecase_GetUserPreview_Call {
	return &UserUsecase_GetUserPreview_Call{Call: _e.mock.On("GetUserPreview", id)}
}

func (_c *UserUsecase_GetUserPreview_Call) Run(run func(id string)) *UserUsecase_GetUserPreview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserUsecase_GetUserPreview_Call) Return(userPreviewResponse *user.UserPreviewResponse, err error) *UserUsecase_GetUserPreview_Call {
	_c.Call.Return(userPreviewResponse, err)
	return _c
}

func (_c *UserUsecase_GetUserPreview_Call) RunAndReturn(run func(id string) (*user.UserPreviewResponse, error)) *UserUsecase_GetUserPreview_Call {
	_c.Call.Return(run)
	return _c
}
