// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/WuttinunSkywalker/linebk-backend-assignment/internal/api/user"
	mock "github.com/stretchr/testify/mock"
)

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// GetUserByID provides a mock function for the type UserRepository
func (_mock *UserRepository) GetUserByID(id string) (*user.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*user.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserRepository_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - id string
func (_e *UserRepository_Expecter) GetUserByID(id interface{}) *UserRepository_GetUserByID_Call {
	return &UserRepository_GetUserByID_Call{Call: _e.mock.On("GetUserByID", id)}
}

func (_c *UserRepository_GetUserByID_Call) Run(run func(id string)) *UserRepository_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserRepository_GetUserByID_Call) Return(user1 *user.User, err error) *UserRepository_GetUserByID_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserRepository_GetUserByID_Call) RunAndReturn(run func(id string) (*user.User, error)) *UserRepository_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserGreetingByUserID provides a mock function for the type UserRepository
func (_mock *UserRepository) GetUserGreetingByUserID(id string) (*user.UserGreeting, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGreetingByUserID")
	}

	var r0 *user.UserGreeting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*user.UserGreeting, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *user.UserGreeting); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserGreeting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_GetUserGreetingByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserGreetingByUserID'
type UserRepository_GetUserGreetingByUserID_Call struct {
	*mock.Call
}

// GetUserGreetingByUserID is a helper method to define mock.On call
//   - id string
func (_e *UserRepository_Expecter) GetUserGreetingByUserID(id interface{}) *UserRepository_GetUserGreetingByUserID_Call {
	return &UserRepository_GetUserGreetingByUserID_Call{Call: _e.mock.On("GetUserGreetingByUserID", id)}
}

func (_c *UserRepository_GetUserGreetingByUserID_Call) Run(run func(id string)) *UserRepository_GetUserGreetingByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserRepository_GetUserGreetingByUserID_Call) Return(userGreeting *user.UserGreeting, err error) *UserRepository_GetUserGreetingByUserID_Call {
	_c.Call.Return(userGreeting, err)
	return _c
}

func (_c *UserRepository_GetUserGreetingByUserID_Call) RunAndReturn(run func(id string) (*user.UserGreeting, error)) *UserRepository_GetUserGreetingByUserID_Call {
	_c.Call.Return(run)
	return _c
}
