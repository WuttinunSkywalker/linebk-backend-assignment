// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewUserHandler creates a new instance of UserHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserHandler {
	mock := &UserHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserHandler is an autogenerated mock type for the UserHandler type
type UserHandler struct {
	mock.Mock
}

type UserHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *UserHandler) EXPECT() *UserHandler_Expecter {
	return &UserHandler_Expecter{mock: &_m.Mock}
}

// GetMe provides a mock function for the type UserHandler
func (_mock *UserHandler) GetMe(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// UserHandler_GetMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMe'
type UserHandler_GetMe_Call struct {
	*mock.Call
}

// GetMe is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *UserHandler_Expecter) GetMe(ctx interface{}) *UserHandler_GetMe_Call {
	return &UserHandler_GetMe_Call{Call: _e.mock.On("GetMe", ctx)}
}

func (_c *UserHandler_GetMe_Call) Run(run func(ctx *gin.Context)) *UserHandler_GetMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserHandler_GetMe_Call) Return() *UserHandler_GetMe_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserHandler_GetMe_Call) RunAndReturn(run func(ctx *gin.Context)) *UserHandler_GetMe_Call {
	_c.Run(run)
	return _c
}

// GetMyGreeting provides a mock function for the type UserHandler
func (_mock *UserHandler) GetMyGreeting(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// UserHandler_GetMyGreeting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMyGreeting'
type UserHandler_GetMyGreeting_Call struct {
	*mock.Call
}

// GetMyGreeting is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *UserHandler_Expecter) GetMyGreeting(ctx interface{}) *UserHandler_GetMyGreeting_Call {
	return &UserHandler_GetMyGreeting_Call{Call: _e.mock.On("GetMyGreeting", ctx)}
}

func (_c *UserHandler_GetMyGreeting_Call) Run(run func(ctx *gin.Context)) *UserHandler_GetMyGreeting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserHandler_GetMyGreeting_Call) Return() *UserHandler_GetMyGreeting_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserHandler_GetMyGreeting_Call) RunAndReturn(run func(ctx *gin.Context)) *UserHandler_GetMyGreeting_Call {
	_c.Run(run)
	return _c
}

// GetUserPreview provides a mock function for the type UserHandler
func (_mock *UserHandler) GetUserPreview(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// UserHandler_GetUserPreview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPreview'
type UserHandler_GetUserPreview_Call struct {
	*mock.Call
}

// GetUserPreview is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *UserHandler_Expecter) GetUserPreview(ctx interface{}) *UserHandler_GetUserPreview_Call {
	return &UserHandler_GetUserPreview_Call{Call: _e.mock.On("GetUserPreview", ctx)}
}

func (_c *UserHandler_GetUserPreview_Call) Run(run func(ctx *gin.Context)) *UserHandler_GetUserPreview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserHandler_GetUserPreview_Call) Return() *UserHandler_GetUserPreview_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserHandler_GetUserPreview_Call) RunAndReturn(run func(ctx *gin.Context)) *UserHandler_GetUserPreview_Call {
	_c.Run(run)
	return _c
}
