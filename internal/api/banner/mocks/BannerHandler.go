// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewBannerHandler creates a new instance of BannerHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBannerHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *BannerHandler {
	mock := &BannerHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// BannerHandler is an autogenerated mock type for the BannerHandler type
type BannerHandler struct {
	mock.Mock
}

type BannerHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *BannerHandler) EXPECT() *BannerHandler_Expecter {
	return &BannerHandler_Expecter{mock: &_m.Mock}
}

// GetMyBanners provides a mock function for the type BannerHandler
func (_mock *BannerHandler) GetMyBanners(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// BannerHandler_GetMyBanners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMyBanners'
type BannerHandler_GetMyBanners_Call struct {
	*mock.Call
}

// GetMyBanners is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *BannerHandler_Expecter) GetMyBanners(ctx interface{}) *BannerHandler_GetMyBanners_Call {
	return &BannerHandler_GetMyBanners_Call{Call: _e.mock.On("GetMyBanners", ctx)}
}

func (_c *BannerHandler_GetMyBanners_Call) Run(run func(ctx *gin.Context)) *BannerHandler_GetMyBanners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BannerHandler_GetMyBanners_Call) Return() *BannerHandler_GetMyBanners_Call {
	_c.Call.Return()
	return _c
}

func (_c *BannerHandler_GetMyBanners_Call) RunAndReturn(run func(ctx *gin.Context)) *BannerHandler_GetMyBanners_Call {
	_c.Run(run)
	return _c
}
