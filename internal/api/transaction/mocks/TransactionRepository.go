// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/WuttinunSkywalker/linebk-backend-assignment/internal/api/transaction"
	mock "github.com/stretchr/testify/mock"
)

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

type TransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionRepository) EXPECT() *TransactionRepository_Expecter {
	return &TransactionRepository_Expecter{mock: &_m.Mock}
}

// CountTransactionsByUserID provides a mock function for the type TransactionRepository
func (_mock *TransactionRepository) CountTransactionsByUserID(userID string) (int, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CountTransactionsByUserID")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TransactionRepository_CountTransactionsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountTransactionsByUserID'
type TransactionRepository_CountTransactionsByUserID_Call struct {
	*mock.Call
}

// CountTransactionsByUserID is a helper method to define mock.On call
//   - userID string
func (_e *TransactionRepository_Expecter) CountTransactionsByUserID(userID interface{}) *TransactionRepository_CountTransactionsByUserID_Call {
	return &TransactionRepository_CountTransactionsByUserID_Call{Call: _e.mock.On("CountTransactionsByUserID", userID)}
}

func (_c *TransactionRepository_CountTransactionsByUserID_Call) Run(run func(userID string)) *TransactionRepository_CountTransactionsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *TransactionRepository_CountTransactionsByUserID_Call) Return(n int, err error) *TransactionRepository_CountTransactionsByUserID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *TransactionRepository_CountTransactionsByUserID_Call) RunAndReturn(run func(userID string) (int, error)) *TransactionRepository_CountTransactionsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsByUserID provides a mock function for the type TransactionRepository
func (_mock *TransactionRepository) GetTransactionsByUserID(userID string, limit int, offset int) ([]*transaction.Transaction, error) {
	ret := _mock.Called(userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByUserID")
	}

	var r0 []*transaction.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) ([]*transaction.Transaction, error)); ok {
		return returnFunc(userID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) []*transaction.Transaction); ok {
		r0 = returnFunc(userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transaction.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TransactionRepository_GetTransactionsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsByUserID'
type TransactionRepository_GetTransactionsByUserID_Call struct {
	*mock.Call
}

// GetTransactionsByUserID is a helper method to define mock.On call
//   - userID string
//   - limit int
//   - offset int
func (_e *TransactionRepository_Expecter) GetTransactionsByUserID(userID interface{}, limit interface{}, offset interface{}) *TransactionRepository_GetTransactionsByUserID_Call {
	return &TransactionRepository_GetTransactionsByUserID_Call{Call: _e.mock.On("GetTransactionsByUserID", userID, limit, offset)}
}

func (_c *TransactionRepository_GetTransactionsByUserID_Call) Run(run func(userID string, limit int, offset int)) *TransactionRepository_GetTransactionsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *TransactionRepository_GetTransactionsByUserID_Call) Return(transactions []*transaction.Transaction, err error) *TransactionRepository_GetTransactionsByUserID_Call {
	_c.Call.Return(transactions, err)
	return _c
}

func (_c *TransactionRepository_GetTransactionsByUserID_Call) RunAndReturn(run func(userID string, limit int, offset int) ([]*transaction.Transaction, error)) *TransactionRepository_GetTransactionsByUserID_Call {
	_c.Call.Return(run)
	return _c
}
